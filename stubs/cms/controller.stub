<?php

namespace App\Http\Controllers;

use App\Models\{{ model }};
use App\Http\Requests\{{ model }}\StoreRequest;
use App\Http\Requests\{{ model }}\UpdateRequest;

class {{ model }}Controller extends Controller
{
    public function index()
    {
        $q = request('q');
        $query = \App\Models\{{ model }}::query();

        {{ softDeletesQuery }}

        {{ searchQuery }}

        $items = $query->latest()->paginate()->withQueryString();

        return view('{{ kebabs }}.index', compact('items', 'q'{{ fkCompactIndex }}));
    }

    public function create()
    {
        {{ fkListLoadsCreate }}

        return view('{{ kebabs }}.create'{{ fkCompactCreate }});
    }

    public function store(StoreRequest $request)
    {
        $item = {{ model }}::create($request->validated());

        return redirect()->route('{{ routeNamePrefix }}{{ kebabs }}.index')
            ->with('success', '{{ model }} created');
    }

    public function show({{ model }} ${{ var }})
    {
        return view('{{ kebabs }}.show', compact('{{ var }}'));
    }

    public function edit({{ model }} ${{ var }})
    {
        {{ fkListLoadsEdit }}

        return view('{{ kebabs }}.edit', compact('{{ var }}'{{ fkCompactEdit }}));
    }

    public function update(UpdateRequest $request, {{ model }} ${{ var }})
    {
        ${{ var }}->update($request->validated());

        return redirect()->route('{{ routeNamePrefix }}{{ kebabs }}.index')
            ->with('success', '{{ model }} updated');
    }

    public function destroy({{ model }} ${{ var }})
    {
        ${{ var }}->delete();

        return back()->with('success', '{{ model }} deleted');
    }

    public function restore($id)
    {
        $item = \App\Models\{{ model }}::onlyTrashed()->findOrFail($id);
        $item->restore();

        return back()->with('success', '{{ model }} restored');
    }
}
